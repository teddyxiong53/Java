单例模式的逐步分析。
Singleton1.java.bak
这个是最简单基础的单例。
但是存在问题：
	1）没有线程安全保护。在多线程环境下，一定出问题。
于是我们改进为Singleton2.java.bak

Singleton2.java.bak
在1的基础上做这些：
	1）在getInstance函数加synchronized锁。
		这个直接锁住整个函数也不太合适，其实只有第一次创建对象时要上锁。
		所以可以把锁的范围缩小。缩小到函数内部。
	2）即使缩小到函数内部，还是可能有问题。
		java里创建对象和赋值是分开的。instance = new Singleton()
		而且JVM不保证这2个操作的先后顺序。
		jvm创建对象后，有可能没有马上初始化对象的内容。
		
在2的基础上，再改进，3是一个比较好的单例。
Singleton3.java.bak
这个使用内部类来维护单例的实现。
jvm的内部机制保证当一个类被加载的时候，这个类的加载过程是线程互斥的。



